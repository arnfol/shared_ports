/*
	This is an automatically generated file.

	Date: {date}
	Author: {author}

*/
module {module_name} (
	input clk,
	input rst_n,

	// internal signals
{internal_signals}

	// peripheral signals
{peripheral_signals}

	// APB bus
	input               psel      ,
	input               penable   ,
	input        [31:0] paddr     ,
	input               pwrite    ,
	input        [31:0] pwdata    ,
	output logic [31:0] prdata
	);

	logic [{psignal_max}:0][{isignal_clog2_max}:0] port_mode;
	logic [{regs_max}:0][3:0][7:0] apb_regs_read;
	logic [{regs_max}:0][3:0][7:0] apb_regs_write;

	logic [{psignal_max}:0][{isignal_max}:0] matr_o ;
	logic [{psignal_max}:0][{isignal_max}:0] matr_oe;
	logic [{psignal_max}:0][{isignal_max}:0] matr_ie;

	/*------------------------------------------------------------------------------
	--  APB REGISTERS
	------------------------------------------------------------------------------*/
	// apb read
	always @(posedge clk or negedge rst_n) begin
		if(~rst_n) begin
			prdata <= 0;
		end else if(psel & ~penable) begin
			prdata <= apb_regs_read[paddr[{regs_clog2_max}:2]];
		end
	end

	// apb write
	genvar i;
	generate for (i = 0; i <= {regs_max}; i++) begin : gen_apb_regs
		always @(posedge clk or negedge rst_n) begin 
			if(~rst_n) begin
				apb_regs_write[i] <= 0;
			end else if(psel & ~penable & pwrite & (paddr[{regs_clog2_max}:2] == i)) begin
				apb_regs_write[i] <= pwdata;
			end
		end
	end endgenerate

	// connect port_mode to apb registers
	generate for (i = 0; i <= {psignal_max}; i++) begin : gen_port_mode
		assign port_mode[i] = apb_regs_write[i/4][i%4];
		assign apb_regs_read[i/4][i%4] = port_mode[i];
	end	endgenerate

	/*------------------------------------------------------------------------------
	--  MUX CONTROL
	------------------------------------------------------------------------------*/

{mux_control}

	/*------------------------------------------------------------------------------
	--  MUX CONNECTIONS
	------------------------------------------------------------------------------*/

	always_comb begin
{connect_default}

{connect_matr}
	end

endmodule